<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:units="clr-namespace:CrevisService.LayoutSupport.UI.Units">
    <Style TargetType="{x:Type units:WrappingListBox}">
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate 
                    TargetType="{x:Type units:WrappingListBox}">
                        <Border 
                            Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}">
                            <ItemsPresenter/>
                        </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel Orientation="{Binding WrapPanelOrientation, RelativeSource={RelativeSource AncestorType={x:Type units:WrappingListBox}}}"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ListBoxItem">
                    <Setter Property="Width" Value="{Binding ItemWidthSize, RelativeSource={RelativeSource AncestorType={x:Type units:WrappingListBox}}}"/>
                    <Setter Property="Height" Value="{Binding ItemHeightSize, RelativeSource={RelativeSource AncestorType={x:Type units:WrappingListBox}}}"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding WrapPanelOrientation, RelativeSource={RelativeSource AncestorType={x:Type units:WrappingListBox}}}" Value="Horizontal">
                            <Setter Property="Width" Value="{Binding ItemWidthSize, RelativeSource={RelativeSource AncestorType={x:Type units:WrappingListBox}}}"/>
                            <Setter Property="Height" Value="{Binding ItemHeightSize, RelativeSource={RelativeSource AncestorType={x:Type units:WrappingListBox}}}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding WrapPanelOrientation, RelativeSource={RelativeSource AncestorType={x:Type units:WrappingListBox}}}" Value="Vertical">
                            <Setter Property="Height" Value="{Binding ItemHeightSize, RelativeSource={RelativeSource AncestorType={x:Type units:WrappingListBox}}}"/>
                            <Setter Property="Width" Value="{Binding ItemWidthSize, RelativeSource={RelativeSource AncestorType={x:Type units:WrappingListBox}}}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsEffect, RelativeSource={RelativeSource AncestorType={x:Type units:WrappingListBox}}}" Value="True">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="ListBoxItem">
                                        <!-- Your existing template -->
                                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                        </Border>
                                        <ControlTemplate.Triggers>
                                            <!-- Your existing triggers -->
                                            <Trigger Property="IsSelected" Value="true">
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Setter Property="Foreground" Value="Transparent"/>
                                            </Trigger>
                                            <MultiTrigger>
                                                <MultiTrigger.Conditions>
                                                    <Condition Property="IsSelected" Value="true"/>
                                                    <Condition Property="Selector.IsSelectionActive" Value="false"/>
                                                </MultiTrigger.Conditions>
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Setter Property="Foreground" Value="Transparent"/>
                                            </MultiTrigger>
                                            <Trigger Property="IsEnabled" Value="false">
                                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                            </Trigger>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Setter Property="Foreground" Value="Transparent"/>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>